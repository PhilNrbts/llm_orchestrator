[tool.poetry]
name = "llm-orchestrator-cli"
version = "0.1.0"
description = "A CLI for orchestrating LLM queries."
authors = ["Baggy"]
readme = "README.md"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = "^3.12"
click = "^8.2.1"
rich = "^14.0.0"
pydantic = "^2.11.7"
cryptography = "^45.0.5"
anthropic = "^0.59.0"
google-generativeai = "^0.8.5"
deepseek = "^1.0.0"
mistralai = "^1.9.3"
pyyaml = "^6.0.2"
prompt-toolkit = "^3.0.51"
sphinx = "^8.2.3"
furo = "^2025.7.19"
myst-parser = "^4.0.1"
sphinx-autodoc-typehints = "^3.2.0"
pytest-asyncio = "^1.1.0"
openai = "^1.97.1"
langchain = "^0.3.27"
langchain-community = "^0.3.27"
langchain-core = "^0.3.72"

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.1"
black = "^23.12.1"
ruff = "^0.1.9"
mypy = "^1.8.0"
pre-commit = "^3.6.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
gemini = "app.main:cli"

[tool.pytest.ini_options]
pythonpath = [
  "."
]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py312"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
